)), rep(NA, max(nreg) - nreg[i]))))
idreg <- sapply(1:ntax, function(i) rbind(do.call("rbind",lapply(1:nreg[i], function(j)
c(which(id %in% sort(unique(pull(df_reg[(df_reg[,quo_name(var_tax)] %in% tax[i] & df_reg$reg %in% region[reg[i,j]]),], !!var_id)))), rep(NA, max(nidreg, na.rm = T) - nidreg[i,j]))
)), array(NA, dim=c(max(nreg) - nreg[i], max(nidreg, na.rm = T)))), simplify = "array")
#-----------------------------------------------------------------------------
popdyn_const <- list(step = timestep, ntax = ntax, nid = nid, ntime = ntime, idtax = idtax, nreg = nreg, reg = reg, nidreg = nidreg, idreg = idreg)
#-----------------------------------------------------------------------------
if (is.null(period)) {
start <- c(2,NA)
end <- c(ntime,NA)
ndate <- c(ntime - 1,NA)
nperiod <- 1
} else {
nperiod <- 1 + length(period)
start <- c(2,mapply(function(i) which(time %in% (period[[i]][1] + timestep)), 1:length(period), SIMPLIFY = "vector"))
end <- c(ntime,mapply(function(i) which(time %in% period[[i]][2]), 1:length(period), SIMPLIFY = "vector"))
ndate <- mapply(function(i) end[i] - start[i], 1:nperiod,  SIMPLIFY = "vector")
}
popdyn_const <- c(popdyn_const, list(nperiod = nperiod, start = start, end = end))
#-----------------------------------------------------------------------------
if (FALSE %in% quo_is_null(var_guild)) {
ng <- which(colnames(df) %in% colnames(select(df, !!var_guild)))
df_guild <- rbind(do.call("rbind",lapply(ng, function(i) data.frame(filter(df, !is.na(df[,i])) %>%
select(!!var_tax, !!var_id, all_of(i)) %>% distinct() %>%
rename(guild = colnames(df[i])) %>%
rowwise() %>% mutate(guild = paste(colnames(df[i]),guild,sep="_")))))) %>% merge(df_reg)
# number of guilds
guild <- sort(unique(df_guild$guild))
ngui <- length(guild)
# regions per guilds
nregui <- tapply(df_guild$reg, list(df_guild$guild), function(i) length(unique(i)))
regui <- do.call("rbind",lapply(1:ngui, function(i) c(which(region %in% sort(unique(df_guild$reg[df_guild$guild %in% guild[i]]))), rep(NA,max(nregui)-nregui[i]))))
# taxa per guilds and region
ngtax <- do.call("rbind",lapply(1:ngui, function(i) c(do.call("cbind",lapply(1:nregui[i], function(j)
length(unique(pull(df_guild[(df_guild$guild %in% guild[i] & df_guild$reg %in% region[regui[i,j]]),], !!var_tax)))
)), rep(NA, max(nregui) - nregui[i]))))
gtax <- sapply(1:ngui, function(i) rbind(do.call("rbind",lapply(1:nregui[i], function(j)
c(which(tax %in% sort(unique(pull(df_guild[(df_guild$guild %in% guild[i] & df_guild$reg %in% region[regui[i,j]]),], !!var_tax)))), rep(NA, max(ngtax, na.rm = T) - ngtax[i,j]))
)), array(NA, dim=c(max(nregui) - nregui[i], max(ngtax, na.rm = T)))), simplify = "array")
if (is.null(dim(gtax))) {
gtax <- sapply(1:ngui, function(i) rbind(do.call("rbind",lapply(1:nregui[i], function(j)
c(which(tax %in% sort(unique(pull(df_guild[(df_guild$guild %in% guild[i] & df_guild$reg %in% region[regui[i,j]]),], !!var_tax)))), rep(NA, max(ngtax, na.rm = T) - ngtax[i,j]))
)), array(NA, dim=c(1, max(ngtax, na.rm = T)))), simplify = "array")
}
# add constants and parameters for guild
popdyn_const <- c(popdyn_const, list(ngui = ngui, nregui = nregui, regui = regui, ngtax = ngtax, gtax = gtax))
}
#-----------------------------------------------------------------------------
z <- tapply(df[,quo_name(var_pres)], list(df[,quo_name(var_tax)],df[,quo_name(var_id)],df[,quo_name(var_tmp)]), unique)
z <- replace(z, which(z > 0), 1)
popdyn_data <- list(z = z)
popdyn_inits <- list(p.per = rep(0.5, ntax), p.col = rep(0.5, ntax), epsilon_per = nimMatrix(0, ntax, length(id)), epsilon_col = nimMatrix(0, ntax, length(id)))
popdyn_parameters <- c("z","p.per","p.col","p.per_id","p.col_id")
if (isTRUE(occup)) {
popdyn_parameters <- c(popdyn_parameters, "p.ext_id","p.ext","z_mulambda","OR","turnover")
popdyn_const <- c(popdyn_const, list(ndate = ndate))
if (FALSE %in% quo_is_null(var_guild)) {
popdyn_parameters <- c(popdyn_parameters,"z_lambda_gui","z_mulambda_gui","GOR")
}
if (isTRUE(modenv)) {
popdyn_parameters <- popdyn_parameters[!popdyn_parameters %in% c("p.col","p.per","p.ext","p.col_id","p.per_id","p.ext_id")]
popdyn_inits <- popdyn_inits[names(popdyn_inits) %in% c("p.per","p.col","epsilon_per","epsilon_col") == FALSE]
if (FALSE %in% quo_is_null(var_envP) & FALSE %in% quo_is_null(var_envC)) {
varenv <- colnames(select(df, !!var_envP))
nvar <- length(varenv)
varcol <- c(varenv[varenv %in% colnames(select(df, !!var_envC))],colnames(select(df, !!var_envC))[!colnames(select(df, !!var_envC)) %in% varenv])
nr <- which(colnames(df) %in% varcol)
ncol <- length(nr)
col <- sapply(nr, function(i) tapply(df[,i], list(df[,quo_name(var_id)],df[,quo_name(var_tmp)]), unique),simplify = "array")
popdyn_inits <- list(alpha_per = rep(0, ntax), beta_per = nimMatrix(0, ntax, nvar),alpha_col =  rep(0, ntax), beta_col = nimMatrix(0, ntax, nvar))
popdyn_parameters <- c(popdyn_parameters, "alpha_per", "beta_per","alpha_col", "beta_col")
popdyn_const <- c(popdyn_const, list(ncol = ncol))
popdyn_data <- c(popdyn_data, list(col = col))
} else if (FALSE %in% quo_is_null(var_envP)) {
varenv <- colnames(select(df, !!var_envP))
nvar <- length(varenv)
popdyn_inits <- list(alpha_per =  rep(0, ntax), beta_per = nimMatrix(0, ntax, nvar), p.col = rep(0.5, ntax), epsilon_col = nimMatrix(0, ntax, length(id)))
popdyn_parameters <- c(popdyn_parameters, "alpha_per", "beta_per","p.col","p.col_id")
} else if (FALSE %in% quo_is_null(var_envC)) {
varenv <- colnames(select(df, !!var_envC))
nvar <- length(varenv)
popdyn_inits <- list(alpha_col =  rep(0, ntax), beta_col = nimMatrix(0, ntax, nvar), p.per = rep(0.5, ntax), epsilon_per = nimMatrix(0, ntax, length(id)))
popdyn_parameters <- c(popdyn_parameters, "alpha_col", "beta_col","p.per","p.per_id")
} else {
varenv <- colnames(select(df, !!var_envO))
nvar <- length(varenv)
popdyn_inits <- list(alpha =  rep(0, ntax), beta = nimMatrix(0, ntax, nvar))
popdyn_parameters <- c(popdyn_parameters, "alpha", "beta")
}
nr <- which(colnames(df) %in% varenv)
var <- sapply(nr, function(i) tapply(df[,i], list(df[,quo_name(var_id)],df[,quo_name(var_tmp)]), unique),simplify = "array")
popdyn_data <- c(popdyn_data,list(var = var))
popdyn_const <- c(popdyn_const, list(nvar = nvar))
}
}
#-----------------------------------------------------------------------------
if (isTRUE(grow)) {
S <- nimArray(1, dim = c(ntax, length(id), ntime))
if (FALSE %in% quo_is_null(var_surf)) {
S <- tapply(df[,quo_name(var_surf)], list(df[,quo_name(var_tax)],df[,quo_name(var_id)],df[,quo_name(var_tmp)]), unique)
}
popdyn_data <- c(popdyn_data, list(S = S))
#---------------------------------------------------------------------------
if (isTRUE(alt)) {
pro <- nimArray(1, dim = c(ntax,length(id),ntime))
if (FALSE %in% quo_is_null(var_pro)) {
npro <- summarise(df, across(quo_name(var_pro), ~length(unique(.x)), .names = "n"), .by=c(!!var_id,!!var_tax)) %>%
filter(n > 1)
for (i in 1:nrow(npro)) {
for (t in 2:ntime) {
d <- filter(df, df[,quo_name(var_tax)] %in% npro[i,quo_name(var_tax)], df[,quo_name(var_id)] %in% npro[i,quo_name(var_id)], df[,quo_name(var_tmp)] %in% time[c(t-1,t)]) %>%
pull(!!var_pro) %>% unique()
if (length(d) > 1) {
pro[which(tax %in% npro[i,quo_name(var_tax)]),which(id %in% npro[i,quo_name(var_id)]),t] <- 0
}
}
}
}
popdyn_data <- c(popdyn_data, list(pro = pro))
}
#---------------------------------------------------------------------------
if (isTRUE(modenvG)) {
varoccup <- c(varenv,varcol)
vargrow <- c(varoccup[varoccup %in% colnames(select(df, !!var_grow))],colnames(select(df, !!var_grow))[!colnames(select(df, !!var_grow)) %in% varoccup])
nr <- which(colnames(df) %in% vargrow)
ngvar <- length(nr)
gvar <- sapply(nr, function(i) tapply(df[,i], list(df[,quo_name(var_id)],df[,quo_name(var_tmp)]), unique),simplify = "array")
popdyn_data <- c(popdyn_data,list(gvar = gvar))
popdyn_const <- c(popdyn_const, list(ngvar = ngvar))
}
#---------------------------------------------------------------------------
if (FALSE %in% quo_is_null(var_cnt)) {
y <- tapply(df[,quo_name(var_cnt)], list(df[,quo_name(var_tax)],df[,quo_name(var_id)],df[,quo_name(var_tmp)]), unique)
y <- replace(y, which(y == 0), 1)
C <- log(replace(y, is.na(y), 1))
popdyn_data <- c(popdyn_data, list(y = y))
popdyn_parameters <- c(popdyn_parameters, "N_PGR","N_mulambda","N_lambda","N_mulambda_id","N_lambda_id","N")
if (isTRUE(modenvG)) {
popdyn_inits <- c(popdyn_inits, list(C = C, alpha_N = rep(0, ntax), beta_N = nimMatrix(1, ntax, ngvar), tauN = nimMatrix(1, ntax, length(id))))
popdyn_parameters <- c(popdyn_parameters, "alpha_N","beta_N")
} else {
popdyn_inits <- c(popdyn_inits, list(C = C, muN = nimMatrix(1, ntax, length(id)), tauN = nimMatrix(1, ntax, length(id))))
}
if (FALSE %in% quo_is_null(var_guild)) {
popdyn_parameters <- c(popdyn_parameters, "N_lambda_gui","N_mulambda_gui","N_GGR")
}
}
#-----------------------------------------------------------------------------
if (FALSE %in% quo_is_null(var_wei)) {
w <- tapply(df[,quo_name(var_wei)], list(df[,quo_name(var_tax)],df[,quo_name(var_id)],df[,quo_name(var_tmp)]), unique)
w <- replace(w, which(w == 0), 1)
W <- log(replace(w, is.na(w), 1))
popdyn_data <- c(popdyn_data, list(w = w))
popdyn_parameters <- c(popdyn_parameters, "B_PGR","B_mulambda","B_lambda","B_mulambda_id","B_lambda_id","B")
if (isTRUE(modenvG)) {
popdyn_inits <- c(popdyn_inits, list(W = W, alpha_B = rep(0, ntax), beta_B = nimMatrix(1, ntax, ngvar), tauB = nimMatrix(1, ntax, length(id))))
popdyn_parameters <- c(popdyn_parameters, "alpha_B","beta_B")
} else {
popdyn_inits <- c(popdyn_inits, list(W = W, muB = nimMatrix(1, ntax, length(id)), tauB = nimMatrix(1, ntax, length(id))))
}
if (FALSE %in% quo_is_null(var_guild)) {
popdyn_parameters <- c(popdyn_parameters, "B_lambda_gui","B_mulambda_gui","B_GGR")
}
}
}
#-----------------------------------------------------------------------------
popdyn_int <- list(taxa = tax, id = id, time = time, region = region, guild = guild, varenv = varenv, varcol = varcol, vargrow = vargrow, start = start, end = end, protocol = NULL, vardet = NULL)
return(list(popdyn_data = popdyn_data, popdyn_const = popdyn_const, popdyn_inits = popdyn_inits, popdyn_parameters = popdyn_parameters, popdyn_int = popdyn_int))
}
#' @import nimble
#'
#' @param code nimble code
#' @param var_cnt quosure
#' @param var_wei quosure
#' @param var_guild quosure
#'
#' @return nimble code
#' @keywords internal
#' @noRd
int_popgrowAlt <- function(code, var_cnt, var_wei, var_guild) {
#-----------------------------------------------------------------------------
## Growth models from headcounts
if (FALSE %in% quo_is_null(var_cnt)) {
counts <- nimbleCode(
for (s in 1:ntax) {
for (j in 1:nreg[s]) {
for (n in 1:nperiod) {
n_reg[s,reg[s,j],n] <- max(n_regt[s,reg[s,j],start[n]:end[n]])
N_mulambda[s,reg[s,j],n] <- n_reg[s,reg[s,j],n] * prod(cal.N_lambda[s,reg[s,j],start[n]:end[n]])^(1/ max(1, step * sum(n_regt[s,reg[s,j],start[n]:end[n]])))
N_PGR[s,reg[s,j],n] <- n_reg[s,reg[s,j],n] * 100 * (N_mulambda[s,reg[s,j],n] - 1)
}
for (t in 2:ntime) {
n_regt[s,reg[s,j],t] <- max(n_zreg[s,reg[s,j],1:nidreg[s,j],t])
N_lambda[s,reg[s,j],t] <- n_regt[s,reg[s,j],t] * sum(cal.N_id[s,reg[s,j],1:nidreg[s,j],t]) / max(1,sum(cal.N[s,reg[s,j],1:nidreg[s,j],t]))
cal.N_lambda[s,reg[s,j],t] <- N_lambda[s,reg[s,j],t] + (1 - n_regt[s,reg[s,j],t])
for (i in 1:nidreg[s,j]) {
n_zreg[s,reg[s,j],i,t] <- n_idt[s,idreg[j,i,s],t]
cal.N_id[s,reg[s,j],i,t] <- N_lambda_id[s,idreg[j,i,s],t] * N[s,idreg[j,i,s],t-1]
cal.N[s,reg[s,j],i,t] <- N[s,idreg[j,i,s],t-1]
}
}
}
for (i in 1:nid[s]) {
for (n in 1:nperiod) {
n_id[s,idtax[s,i],n] <- max(n_idt[s,idtax[s,i],start[n]:end[n]])
N_mulambda_id[s,idtax[s,i],n] <-  n_id[s,idtax[s,i],n] * prod(cal.Nlambda_id[s,idtax[s,i],start[n]:end[n]])^(1/(step * max(1,sum(n_idt[s,idtax[s,i],start[n]:end[n]]))))
}
for (t in 2:ntime) {
C[s,idtax[s,i],t] ~ dgamma(1,1)
log_N[s,idtax[s,i],t] <- pro[s,idtax[s,i],t] * z[s,idtax[s,i],t-1] * log(muN[s,idtax[s,i]] * y[s,idtax[s,i],t-1] * (S[s,idtax[s,i],t-1] / S[s,idtax[s,i],t])) + (1 - pro[s,idtax[s,i],t] * z[s,idtax[s,i],t-1]) * C[s,idtax[s,i],t]
y[s,idtax[s,i],t] ~ dlnorm(log_N[s,idtax[s,i],t], tauN[s,idtax[s,i]])
N[s,idtax[s,i],t] <- z[s,idtax[s,i],t] * y[s,idtax[s,i],t]
n_idt[s,idtax[s,i],t] <- pro[s,idtax[s,i],t] * z[s,idtax[s,i],t] * z[s,idtax[s,i],t-1]
N_lambda_id[s,idtax[s,i],t] <- n_idt[s,idtax[s,i],t] * (y[s,idtax[s,i],t] / y[s,idtax[s,i],t-1]) * (S[s,idtax[s,i],t] / S[s,idtax[s,i],t-1])
cal.Nlambda_id[s,idtax[s,i],t] <- N_lambda_id[s,idtax[s,i],t] + (1 - n_idt[s,idtax[s,i],t])
}
log_N[s,idtax[s,i],1] ~ dgamma(1,1)
y[s,idtax[s,i],1] ~ dlnorm(log_N[s,idtax[s,i],1], tauN[s,idtax[s,i]])
N[s,idtax[s,i],1] <- z[s,idtax[s,i],1] * y[s,idtax[s,i],1]
n_idt[s,idtax[s,i],1] <- 0
muN[s,idtax[s,i]] ~ dgamma(0.01,0.01)
tauN[s,idtax[s,i]] ~ dgamma(0.01,0.01)
}
}
)
code <- c(code,list(counts))
#---------------------------------------------------------------------------
# Growth rates for guilds
if (FALSE %in% quo_is_null(var_guild)) {
counts_guild <- nimbleCode(
for(g in 1:ngui) {
for (j in 1:nregui[g]) {
for (n in 1:nperiod) {
n_gui[g,regui[g,j],n] <- max(n_guit[g,regui[g,j],start[n]:end[n]])
N_mulambda_gui[g,regui[g,j],n] <- n_gui[g,regui[g,j],n] * prod(cal.N_lambda_gui[g,regui[g,j],start[n]:end[n]])^(1/max(1, step * sum(n_guit[g,regui[g,j],start[n]:end[n]])))
N_GGR[g,regui[g,j],n] <- n_gui[g,regui[g,j],n] * 100 * (N_mulambda_gui[g,regui[g,j],n] - 1)
}
for (t in 2:ntime) {
n_guit[g,regui[g,j],t] <- max(n_tax[g,regui[g,j],1:ngtax[g,j],t])
N_lambda_gui[g,regui[g,j],t] <- n_guit[g,regui[g,j],t] * prod(cal.Nlambda_tax[g,regui[g,j],1:ngtax[g,j],t])^(1 / max(1,sum(n_tax[g,regui[g,j],1:ngtax[g,j],t])))
cal.N_lambda_gui[g,regui[g,j],t] <- N_lambda_gui[g,regui[g,j],t] + (1 - n_guit[g,regui[g,j],t])
for(s in 1:ngtax[g,j]) {
n_tax[g,regui[g,j],s,t] <- n_regt[gtax[j,s,g],regui[g,j],t]
cal.Nlambda_tax[g,regui[g,j],s,t] <- cal.N_lambda[gtax[j,s,g],regui[g,j],t]
}
}
}
}
)
code <- c(code,list(counts_guild))
}
}
#---------------------------------------------------------------------------
## Growth models from biomass
if (FALSE %in% quo_is_null(var_wei)) {
biomass <- nimbleCode(
for (s in 1:ntax) {
for (j in 1:nreg[s]) {
for (n in 1:nperiod) {
b_reg[s,reg[s,j],n] <- max(b_regt[s,reg[s,j],start[n]:end[n]])
B_mulambda[s,reg[s,j],n] <- b_reg[s,reg[s,j],n] * prod(cal.B_lambda[s,reg[s,j],start[n]:end[n]])^(1/ max(1, step * sum(b_regt[s,reg[s,j],start[n]:end[n]])))
B_PGR[s,reg[s,j],n] <- b_reg[s,reg[s,j],n] * 100 * (B_mulambda[s,reg[s,j],n] - 1)
}
for (t in 2:ntime) {
b_regt[s,reg[s,j],t] <- max(b_zreg[s,reg[s,j],1:nidreg[s,j],t])
B_lambda[s,reg[s,j],t] <- b_regt[s,reg[s,j],t] * sum(cal.B_id[s,reg[s,j],1:nidreg[s,j],t]) / max(1,sum(cal.B[s,reg[s,j],1:nidreg[s,j],t]))
cal.B_lambda[s,reg[s,j],t] <- B_lambda[s,reg[s,j],t] + (1 - b_regt[s,reg[s,j],t])
for (i in 1:nidreg[s,j]) {
b_zreg[s,reg[s,j],i,t] <- b_idt[s,idreg[j,i,s],t]
cal.B_id[s,reg[s,j],i,t] <- B_lambda_id[s,idreg[j,i,s],t] * B[s,idreg[j,i,s],t-1]
cal.B[s,reg[s,j],i,t] <- B[s,idreg[j,i,s],t-1]
}
}
}
for (i in 1:nid[s]) {
for (n in 1:nperiod) {
b_id[s,idtax[s,i],n] <- max(b_idt[s,idtax[s,i],start[n]:end[n]])
B_mulambda_id[s,idtax[s,i],n] <-  b_id[s,idtax[s,i],n] * prod(cal.Blambda_id[s,idtax[s,i],start[n]:end[n]])^(1/(step * max(1,sum(b_idt[s,idtax[s,i],start[n]:end[n]]))))
}
for (t in 2:ntime) {
W[s,idtax[s,i],t] ~ dgamma(1,1)
log_B[s,idtax[s,i],t] <- pro[s,idtax[s,i],t] * z[s,idtax[s,i],t-1] * log(muB[s,idtax[s,i]] * w[s,idtax[s,i],t-1] * (S[s,idtax[s,i],t-1] / S[s,idtax[s,i],t])) + (1 - pro[s,idtax[s,i],t] * z[s,idtax[s,i],t-1]) * W[s,idtax[s,i],t]
w[s,idtax[s,i],t] ~ dlnorm(log_B[s,idtax[s,i],t], tauB[s,idtax[s,i]])
B[s,idtax[s,i],t] <- z[s,idtax[s,i],t] * w[s,idtax[s,i],t]
b_idt[s,idtax[s,i],t] <- pro[s,idtax[s,i],t] * z[s,idtax[s,i],t] * z[s,idtax[s,i],t-1]
B_lambda_id[s,idtax[s,i],t] <- b_idt[s,idtax[s,i],t] * (w[s,idtax[s,i],t] / w[s,idtax[s,i],t-1]) * (S[s,idtax[s,i],t] / S[s,idtax[s,i],t-1])
cal.Blambda_id[s,idtax[s,i],t] <- B_lambda_id[s,idtax[s,i],t] + (1 - b_idt[s,idtax[s,i],t])
}
log_B[s,idtax[s,i],1] ~ dgamma(1,1)
w[s,idtax[s,i],1] ~ dlnorm(log_B[s,idtax[s,i],1], tauB[s,idtax[s,i]])
B[s,idtax[s,i],1] <- z[s,idtax[s,i],1] * w[s,idtax[s,i],1]
b_idt[s,idtax[s,i],1] <- 0
muB[s,idtax[s,i]] ~ dgamma(0.01,0.01)
tauB[s,idtax[s,i]] ~ dgamma(0.01,0.01)
}
}
)
code <- c(code,list(biomass))
#---------------------------------------------------------------------------
# Growth rates for guilds
if (FALSE %in% quo_is_null(var_guild)) {
biomass_guild <- nimbleCode(
for(g in 1:ngui) {
for (j in 1:nregui[g]) {
for (n in 1:nperiod) {
b_gui[g,regui[g,j],n] <- max(b_guit[g,regui[g,j],start[n]:end[n]])
B_mulambda_gui[g,regui[g,j],n] <- b_gui[g,regui[g,j],n] * prod(cal.B_lambda_gui[g,regui[g,j],start[n]:end[n]])^(1/max(1, step * sum(b_guit[g,regui[g,j],start[n]:end[n]])))
B_GGR[g,regui[g,j],n] <- b_gui[g,regui[g,j],n] * 100 * (B_mulambda_gui[g,regui[g,j],n] - 1)
}
for (t in 2:ntime) {
b_guit[g,regui[g,j],t] <- max(b_tax[g,regui[g,j],1:ngtax[g,j],t])
B_lambda_gui[g,regui[g,j],t] <- b_guit[g,regui[g,j],t] * prod(cal.Blambda_tax[g,regui[g,j],1:ngtax[g,j],t])^(1 / max(1,sum(b_tax[g,regui[g,j],1:ngtax[g,j],t])))
cal.B_lambda_gui[g,regui[g,j],t] <- B_lambda_gui[g,regui[g,j],t] + (1 - b_guit[g,regui[g,j],t])
for(s in 1:ngtax[g,j]) {
b_tax[g,regui[g,j],s,t] <- b_regt[gtax[j,s,g],regui[g,j],t]
cal.Blambda_tax[g,regui[g,j],s,t] <- cal.B_lambda[gtax[j,s,g],regui[g,j],t]
}
}
}
}
)
code <- c(code,list(biomass_guild))
}
}
#-----------------------------------------------------------------------------
return(as.call(c(as.symbol("{"), code)))
}
#' @param n_burnin numeric
#'
#' @return output list
#' @export
#'
#' @examples
#' \dontrun{
#' data(riverfish)
#' df <- riverfish[riverfish$pass == 1,]
#' }
mod_popdynAlt <- function(df, var_id, var_tmp, var_tax=NULL, var_cnt=NULL, var_wei=NULL, var_surf=NULL, var_pro=NULL, var_reg=NULL, var_guild=NULL, period=NULL, timestep=1, save_parameters = NULL, n_chain = 3, n_iter = 10000, n_thin = ceiling(n_iter/100), n_burnin = floor(n_iter/4)) {
#-----------------------------------------------------------------------------
# Check for missing required arguments
check_required(var_id)
check_required(var_tmp)
if (quo_is_null(enquo(var_cnt)) & quo_is_null(enquo(var_wei))) {
abort("'var_cnt' or 'var_wei' must be supplied")
}
#-----------------------------------------------------------------------------
# Check for mistakes, if failure return an error message and stop
df <- do.call(int_checkfunction, list(df,
vars_in_df=syms(c(var_id, var_tmp, var_tax, var_cnt, var_wei, var_surf, var_pro, var_reg, var_guild)),
vars_na=syms(c(var_id, var_tmp, var_tax, var_surf, var_pro)),
vars_numeric=syms(c(var_tmp, var_cnt, var_wei, var_surf)),
vars_duplicate=syms(c(var_id, var_tmp, var_tax)),
var_tmp=enquo(var_tmp), timestep, period,
vars_pas=NULL))
#-----------------------------------------------------------------------------
var_id <- enquo(var_id)
var_tmp <- enquo(var_tmp)
var_tax <- enquo(var_tax)
var_cnt <- enquo(var_cnt)
var_wei <- enquo(var_wei)
var_surf <- enquo(var_surf)
var_pro <- enquo(var_pro)
var_reg <- enquo(var_reg)
var_guild <- enquo(var_guild)
if (quo_is_null(var_cnt)) { var_pres <- var_wei } else { var_pres <- var_cnt }
#-----------------------------------------------------------------------------
# Write model and model data
datamodel <- do.call(int_datamodel, list(df, occup=TRUE, grow=TRUE, modenv=FALSE, modenvG=FALSE, alt=TRUE, timestep, period, var_id, var_tmp, var_tax, var_pres, var_reg, var_guild, var_cnt, var_wei, var_surf, var_pro, var_envO=NULL, var_envP=NULL, var_envC=NULL, var_grow=NULL))
code <- do.call(int_popoccup, list(occup=TRUE,modenv=FALSE,var_envO=NULL,var_envP=NULL,var_envC=NULL,var_guild))
popdyn_code <- do.call(int_popgrowAlt, list(code,var_cnt,var_wei,var_guild))
#-----------------------------------------------------------------------------
# Define requested parameters
if (is.null(save_parameters)) { save_parameters <- datamodel$popdyn_parameters } else {
if (FALSE %in% is.element(save_parameters, datamodel$popdyn_parameters)) {
para_name <- save_parameters[which(is.element(save_parameters, datamodel$popdyn_parameters) %in% FALSE)]
abort(paste0("Some parameters are not in model: '", para_name, "'", collapse = " "))
}
}
#-----------------------------------------------------------------------------
# Fit model
set.seed(123)
popdyn <- nimbleModel(code = popdyn_code,
constants = datamodel$popdyn_const,
data = datamodel$popdyn_data,
inits = datamodel$popdyn_inits,
name = "popdyn", calculate = FALSE)
popdynConf <- configureMCMC(popdyn, monitors = save_parameters)
popdynMCMC <- buildMCMC(popdynConf)
popdynComp <- compileNimble(popdyn)
popdynModel <- compileNimble(popdynMCMC, project = popdyn, resetFunctions = TRUE)
mcmc_chain <- runMCMC(popdynModel, nchains = n_chain, niter = n_iter, thin = n_thin, nburnin = n_burnin, setSeed = 123, samplesAsCodaMCMC = TRUE)
if (n_chain == 1 & !is.null(dim(mcmc_chain))) {
mcmc_na <- which(is.na(mcmc_chain[1,]))
if (length(mcmc_na) > 0) { mcmc_chain <- mcmc_chain[,-mcmc_na] }
}
if (n_chain > 1 & !is.null(dim(mcmc_chain[[1]]))) { for (i in 1:n_chain) {
mcmc_chain[[i]] <- mcmc_chain[[i]][,!colnames(mcmc_chain[[i]]) %in% names(which(is.na(mcmc_chain[[i]][1,])))]
}}
#-----------------------------------------------------------------------------
# set summary data frame and list of subscripts
mcmc_summary <- MCMCsummary(mcmc_chain, probs = c(0.025, 0.25, 0.5, 0.75, 0.975), Rhat = TRUE, n.eff = TRUE)
list_summary <- do.call(int_transformsummary, list(mcmc_summary, datamodel, var_id, var_tmp, var_tax, period))
output <- list(mcmc_summary = list_summary$mcmc_summary, mcmc_chain = mcmc_chain, subscript = list_summary$subscript)
#-----------------------------------------------------------------------------
return(output)
}
#-------------------------------------------------------------------------------
# mod_popdynAlt
#-------------------------------------------------------------------------------
# Multi-taxa occupancy and population growth from abundance
mcmc.out <- mod_popdynAlt(df,
var_id = "pop_id",
var_tmp = "year",
var_tax = "taxa",
var_cnt = "headcount",
n_chain=3,
n_iter=10,
n_thin=1,
n_burnin=0)
# Multi-taxa occupancy and population growth from biomass
mcmc.out <- mod_popdynAlt(df,
var_id = "pop_id",
var_tmp = "year",
var_tax = "taxa",
var_wei = "biomass",
n_chain=3,
n_iter=10,
n_thin=1,
n_burnin=0)
# Multi-taxa occupancy and population growth from abundance and biomass
mcmc.out <- mod_popdynAlt(df,
var_id = "pop_id",
var_tmp = "year",
var_tax = "taxa",
var_cnt = "headcount",
var_wei = "biomass",
n_chain=3,
n_iter=10,
n_thin=1,
n_burnin=0)
#-------------------------------------------------------------------------------
# get_modelparameters
#-------------------------------------------------------------------------------
modfunparameters <- read.table("int_poparameter.csv",sep=";",header=T)
save(modfunparameters, file="modfunparameters.rda")
# Get description about all parameters of mod_popoccup function
get_modparameters(fun = "mod_popoccup")
# Get description about all parameters of mod_popoccup function
get_modparameters(fun = "mod_popoccup")
# Get description about all parameters of mod_popoccup function
get_modparameters(fun = "mod_popgrowAlt")
library(usethis)
library(devtools)
library(roxygen2)
library(desc)
remove.packages("popdynmodel")
chemin <- "C:/Users/DORTEL/Desktop/PACKAGE/popdynmodel"
setwd(chemin)
#-------------------------------------------------------------------------------
## Création des fichiers d'aide et du Namespace
devtools::document()
#-------------------------------------------------------------------------------
## Création des fichiers d'aide et du Namespace
devtools::document()
desc_set(Title = "POPULATION DYNAMICS MODELLING")
desc_set(Version = "1.0")
desc_set_list("Author",c("Emmanuelle Dortel[cre,aut] <emmanuelle.dortel@gmail.com>","Pascal Irz[ctb] <pascal.irz@ofb.gouv.fr>","Nicolas Poulet[ctb] <nicolas.poulet@ofb.gouv.fr>", "Aurelien Besnard[ctb] <aurelien.besnard@cefe.cnrs.fr>"))
desc_set(Maintainer = "Emmanuelle Dortel <emmanuelle.dortel@gmail.com>")
desc_set(Description = "Provides functions to implement population dynamics models in a hierarchical Bayesian framework.")
desc_set(License = "GPL-3")
desc_set(Depends = "R (>= 4.2.0)")
desc_set_list("Imports",c("dplyr","magrittr","MCMCvis","nimble","rlang","stats","stringr","tidyr","tidyselect"))
devtools::check()
#---------------------------------------------------------------------------------------------------------------------
## Verification du package
devtools::check(document=FALSE)
#---------------------------------------------------------------------------------------------------------------------
## Verification du package
devtools::check(document=FALSE)
#---------------------------------------------------------------------------------------------------------------------
## Verification du package
devtools::check(document=FALSE)
#---------------------------------------------------------------------------------------------------------------------
## Verification du package
devtools::check(document=FALSE)
#---------------------------------------------------------------------------------------------------------------------
## Verification du package
devtools::check(document=FALSE)
#---------------------------------------------------------------------------------------------------------------------
## Verification du package
devtools::check(document=FALSE)
#---------------------------------------------------------------------------------------------------------------------
## Verification du package
devtools::check(document=FALSE)
#---------------------------------------------------------------------------------------------------------------------
## Installation du package
devtools::install()
#---------------------------------------------------------------------------------------------------------------------
## Readme
usethis::use_readme_md()
#---------------------------------------------------------------------------------------------------------------------
## Vignette
usethis::use_vignette("popdynmodel")
#---------------------------------------------------------------------------------------------------------------------
## Générer le fichier compressé
devtools::build()
#---------------------------------------------------------------------------------------------------------------------
## Vignette
usethis::use_vignette("popdynmodel")
#---------------------------------------------------------------------------------------------------------------------
## Générer le fichier compressé
devtools::build()
