library(devtools)
devtools::install_github(repo = "manue6/popdynmodel", ref = "refactor_to_package")
setwd("C:/Users/DORTEL/Desktop/PACKAGE")
library(magrittr)
library(nimble)
library(rlang)
library(MCMCvis)
source("Fonction_package_modelisation.R")
load("Donnee/riverfish.rda")
df <- riverfish[riverfish$pass == 1,]
df <- df[df$taxa == "pike",]
var_id = "pop_id"
var_id = "pop_id"
var_tmp = "year"
var_cnt = "headcount"
var_env = "temperature"
var_envO = "temperature"
var_surf = "surface"
n_chain=3
n_iter=10
n_thin=1
n_burnin=0
#-----------------------------------------------------------------------------
# Check for mistakes, if failure return an error message and stop
df <- do.call(int_checkvarenv, list(df, var_id=enquo(var_id), var_tmp=enquo(var_tmp), vars=syms(c(var_env,var_envO,var_envP,var_envC))))
var_tax=NULL
var_tax=NULL
var_cnt=NULL
var_wei=NULL
var_env=NULL
var_envO=NULL
var_envP=NULL
var_envC=NULL
var_surf=NULL
var_reg=NULL
var_guild=NULL
period=NULL
timestep=1
save_parameters = NULL
var_id = "pop_id"
var_tmp = "year"
var_cnt = "headcount"
var_env = "temperature"
var_envO = "temperature"
var_surf = "surface"
n_chain=3
n_iter=10
n_thin=1
n_burnin=0
#-----------------------------------------------------------------------------
# Check for mistakes, if failure return an error message and stop
df <- do.call(int_checkvarenv, list(df, var_id=enquo(var_id), var_tmp=enquo(var_tmp), vars=syms(c(var_env,var_envO,var_envP,var_envC))))
#' @return output list
#' @export
#'
#' @examples
#' #' \dontrun{
#' data(riverfish)
#' df <- riverfish[riverfish$pass == 1,]
#' mcmc.out <- modenv_popdyn(df[df$taxa == "pike",],var_id = "pop_id",var_tmp = "year",var_cnt = "headcount",var_env = "temperature",var_envO = "temperature",var_surf = "surface",n_chain=3,n_iter=10,n_thin=1,n_burnin=0)
#' mcmc.out <- modenv_popdyn(df[!is.na(df$gudgeon),],var_id = "pop_id",var_tmp = "year",var_tax = "taxa",var_cnt = "headcount",var_wei = "biomass",var_envP = c("temperature","depth"),var_envC = "temperature",var_surf = "surface",var_guild = "gudgeon",n_chain=3,n_iter=10,n_thin=1,n_burnin=0)
#' }
modenv_popdyn <- function(df, var_id, var_tmp, var_tax=NULL, var_cnt=NULL, var_wei=NULL, var_env=NULL, var_envO=NULL, var_envP=NULL, var_envC=NULL, var_surf=NULL, var_reg=NULL, var_guild=NULL, period=NULL, timestep=1, save_parameters = NULL, n_chain = 3, n_iter = 10000, n_thin = ceiling(n_iter/100), n_burnin = floor(n_iter/4)) {
#-----------------------------------------------------------------------------
# Check for missing required arguments
check_required(var_id)
check_required(var_tmp)
if (quo_is_null(enquo(var_cnt)) & quo_is_null(enquo(var_wei))) {
abort("'var_cnt' or 'var_wei' must be supplied")
}
#-----------------------------------------------------------------------------
# Check for mistakes, if failure return an error message and stop
df <- do.call(int_checkvarenv, list(df, var_id=enquo(var_id), var_tmp=enquo(var_tmp), vars=syms(c(var_env,var_envO,var_envP,var_envC))))
df <- do.call(int_checkfunction, list(df,
vars_in_df=syms(c(var_id, var_tmp, var_tax, var_cnt, var_wei, var_env, var_envO, var_envP, var_envC, var_surf, var_reg, var_guild)),
vars_na=syms(c(var_id, var_tmp, var_tax, var_env, var_envO, var_envP, var_envC, var_surf)),
vars_numeric=syms(c(var_tmp, var_cnt, var_wei, var_env, var_envO, var_envP, var_envC, var_surf)),
vars_duplicate=syms(c(var_id, var_tmp, var_tax)),
var_tmp=enquo(var_tmp), timestep, period,
vars_pas=NULL))
#-----------------------------------------------------------------------------
var_id <- enquo(var_id)
var_tmp <- enquo(var_tmp)
var_tax <- enquo(var_tax)
var_cnt <- enquo(var_cnt)
var_wei <- enquo(var_wei)
var_grow <- enquo(var_env)
var_envO <- enquo(var_envO)
var_envP <- enquo(var_envP)
var_envC <- enquo(var_envC)
var_surf <- enquo(var_surf)
var_reg <- enquo(var_reg)
var_guild <- enquo(var_guild)
if (quo_is_null(var_cnt)) { var_pres <- var_wei } else { var_pres <- var_cnt }
#-----------------------------------------------------------------------------
# Write model and model data
modenv <- modenvG <- 1
if (quo_is_null(var_grow)) { modenvG <- NULL }
if (quo_is_null(var_envO) & quo_is_null(var_envP) &  quo_is_null(var_envC)) { modenv <- NULL }
datamodel <- do.call(int_datamodel, list(df, occup=TRUE, grow=TRUE, modenv, modenvG, timestep, period, var_id, var_tmp, var_tax, var_pres, var_reg, var_guild, var_cnt, var_wei, var_surf, var_envO, var_envP, var_envC, var_grow))
code <- do.call(int_popoccup, list(occup=TRUE,modenv,var_envO,var_envP,var_envC,var_guild))
popdyn_code <- do.call(int_popgrow, list(code,modenvG,var_cnt,var_wei,var_guild))
#-----------------------------------------------------------------------------
# Define requested parameters
if (is.null(save_parameters)) { save_parameters <- datamodel$popdyn_parameters } else {
if (FALSE %in% is.element(save_parameters, datamodel$popdyn_parameters)) {
para_name <- save_parameters[which(is.element(save_parameters, datamodel$popdyn_parameters) %in% FALSE)]
abort(paste0("Some parameters are not in model: '", para_name, "'", collapse = " "))
}
}
#-----------------------------------------------------------------------------
# Fit model
set.seed(123)
popdyn <- nimbleModel(code = popdyn_code,
constants = datamodel$popdyn_const,
data = datamodel$popdyn_data,
inits = datamodel$popdyn_inits,
name = "popdyn", calculate = FALSE)
popdynConf <- configureMCMC(popdyn, monitors = save_parameters)
popdynMCMC <- buildMCMC(popdynConf)
popdynComp <- compileNimble(popdyn)
popdynModel <- compileNimble(popdynMCMC, project = popdyn, resetFunctions = TRUE)
mcmc_chain <- runMCMC(popdynModel, nchains = n_chain, niter = n_iter, thin = n_thin, nburnin = n_burnin, setSeed = 123, samplesAsCodaMCMC = TRUE)
if (n_chain == 1 & !is.null(dim(mcmc_chain))) {
mcmc_na <- which(is.na(mcmc_chain[1,]))
if (length(mcmc_na) > 0) { mcmc_chain <- mcmc_chain[,-mcmc_na] }
}
if (n_chain > 1 & !is.null(dim(mcmc_chain[[1]]))) { for (i in 1:n_chain) {
mcmc_chain[[i]] <- mcmc_chain[[i]][,!colnames(mcmc_chain[[i]]) %in% names(which(is.na(mcmc_chain[[i]][1,])))]
}}
#-----------------------------------------------------------------------------
# set summary data frame and list of subscripts
try(mcmc_summary <- MCMCsummary(mcmc_chain, probs = c(0.025, 0.25, 0.5, 0.75, 0.975), Rhat = TRUE, n.eff = TRUE))
if (!exists("mcmc_summary")) {
return(mcmc_chain)
stop(expression(NULL))
}
list_summary <- do.call(int_transformsummary, list(mcmc_summary, datamodel, var_id, var_tmp, var_tax, period))
output <- list(mcmc_summary = list_summary$mcmc_summary, mcmc_chain = mcmc_chain, subscript = list_summary$subscript)
#-----------------------------------------------------------------------------
return(output)
}
mcmc.out <- modenv_popdyn(df[df$taxa == "pike",],var_id = "pop_id",var_tmp = "year",var_cnt = "headcount",var_env = "temperature",var_envO = "temperature",var_surf = "surface",n_chain=3,n_iter=10,n_thin=1,n_burnin=0)
library(dplyr)
#-----------------------------------------------------------------------------
# Check for mistakes, if failure return an error message and stop
df <- do.call(int_checkvarenv, list(df, var_id=enquo(var_id), var_tmp=enquo(var_tmp), vars=syms(c(var_env,var_envO,var_envP,var_envC))))
df <- do.call(int_checkfunction, list(df,
vars_in_df=syms(c(var_id, var_tmp, var_tax, var_cnt, var_wei, var_env, var_envO, var_envP, var_envC, var_surf, var_reg, var_guild)),
vars_na=syms(c(var_id, var_tmp, var_tax, var_env, var_envO, var_envP, var_envC, var_surf)),
vars_numeric=syms(c(var_tmp, var_cnt, var_wei, var_env, var_envO, var_envP, var_envC, var_surf)),
vars_duplicate=syms(c(var_id, var_tmp, var_tax)),
var_tmp=enquo(var_tmp), timestep, period,
vars_pas=NULL))
#-----------------------------------------------------------------------------
var_id <- enquo(var_id)
var_tmp <- enquo(var_tmp)
var_tax <- enquo(var_tax)
var_cnt <- enquo(var_cnt)
var_wei <- enquo(var_wei)
var_grow <- enquo(var_env)
var_envO <- enquo(var_envO)
var_envP <- enquo(var_envP)
var_envC <- enquo(var_envC)
var_surf <- enquo(var_surf)
var_reg <- enquo(var_reg)
var_guild <- enquo(var_guild)
if (quo_is_null(var_cnt)) { var_pres <- var_wei } else { var_pres <- var_cnt }
#-----------------------------------------------------------------------------
# Write model and model data
modenv <- modenvG <- 1
if (quo_is_null(var_grow)) { modenvG <- NULL }
if (quo_is_null(var_envO) & quo_is_null(var_envP) &  quo_is_null(var_envC)) { modenv <- NULL }
datamodel <- do.call(int_datamodel, list(df, occup=TRUE, grow=TRUE, modenv, modenvG, timestep, period, var_id, var_tmp, var_tax, var_pres, var_reg, var_guild, var_cnt, var_wei, var_surf, var_envO, var_envP, var_envC, var_grow))
code <- do.call(int_popoccup, list(occup=TRUE,modenv,var_envO,var_envP,var_envC,var_guild))
popdyn_code <- do.call(int_popgrow, list(code,modenvG,var_cnt,var_wei,var_guild))
#-----------------------------------------------------------------------------
# Define requested parameters
if (is.null(save_parameters)) { save_parameters <- datamodel$popdyn_parameters } else {
if (FALSE %in% is.element(save_parameters, datamodel$popdyn_parameters)) {
para_name <- save_parameters[which(is.element(save_parameters, datamodel$popdyn_parameters) %in% FALSE)]
abort(paste0("Some parameters are not in model: '", para_name, "'", collapse = " "))
}
}
#-----------------------------------------------------------------------------
# Fit model
set.seed(123)
popdyn <- nimbleModel(code = popdyn_code,
constants = datamodel$popdyn_const,
data = datamodel$popdyn_data,
inits = datamodel$popdyn_inits,
name = "popdyn", calculate = FALSE)
popdynConf <- configureMCMC(popdyn, monitors = save_parameters)
popdynMCMC <- buildMCMC(popdynConf)
popdynComp <- compileNimble(popdyn)
popdynModel <- compileNimble(popdynMCMC, project = popdyn, resetFunctions = TRUE)
mcmc_chain <- runMCMC(popdynModel, nchains = n_chain, niter = n_iter, thin = n_thin, nburnin = n_burnin, setSeed = 123, samplesAsCodaMCMC = TRUE)
if (n_chain == 1 & !is.null(dim(mcmc_chain))) {
mcmc_na <- which(is.na(mcmc_chain[1,]))
if (length(mcmc_na) > 0) { mcmc_chain <- mcmc_chain[,-mcmc_na] }
}
if (n_chain > 1 & !is.null(dim(mcmc_chain[[1]]))) { for (i in 1:n_chain) {
mcmc_chain[[i]] <- mcmc_chain[[i]][,!colnames(mcmc_chain[[i]]) %in% names(which(is.na(mcmc_chain[[i]][1,])))]
}}
#-----------------------------------------------------------------------------
# set summary data frame and list of subscripts
try(mcmc_summary <- MCMCsummary(mcmc_chain, probs = c(0.025, 0.25, 0.5, 0.75, 0.975), Rhat = TRUE, n.eff = TRUE))
if (!exists("mcmc_summary")) {
return(mcmc_chain)
stop(expression(NULL))
}
list_summary <- do.call(int_transformsummary, list(mcmc_summary, datamodel, var_id, var_tmp, var_tax, period))
load("Donnee/riverfish.rda")
head(riverfish)
class(riverfish$pop_id)
class(riverfish$taxa)
unique(riverfish$taxa)
unique(riverfish$family)
load("modfunparameters.rda")
load("modfunparameters.rda")
ncol(modfunparameters)
head(modfunparameters)
help(caller_env)
help("data"
)
help(log)
help(logit)
help(data)
help(logit)
help(log)
library(nimble)
help(logit)
library(hrlp=pracma)
library(help=pracma)
help(logit<-)
help(logit)
library(help=nimble)
help(nimbleFunctionBase-class)
help(nimbleFunctionBase)
help(nimble-R-functions )
help(nimble-R-functions)
nimble-R-functions
help("nimble-R-functions")
help(nodeFunctions)
help(<-)
help("<-")
library(nimble)
remove.packages("popdynmodel")
help(remove.packages)
help(tidyselect)
library(tidyselect)
chemin <- "F:/IR_POISSON/PACKAGE_POPDYNMODEL/popdynmodel"
setwd(chemin)
library(nimble)
library(rlang)
library(magrittr)
library(dplyr)
library(MCMCvis)
library(tidyr)
library(stringr)
library(tidyverse)
load("Donnee/riverfish.rda")
df <- riverfish[riverfish$pass == 1,]
var_id <- "pop_id"
var_tmp <- "year"
var_tax <- "taxa"
var_cnt <- "headcount"
var_envO <- c("temperature","depth")
var_envP <- var_envC <- NULL
var_wei <- NULL
var_env <- NULL
var_surf <- NULL
var_pro <- NULL
var_det <- NULL
var_reg <- NULL
var_guild <- NULL
var_pas <- "pass"
timestep <- 1
period <- NULL
n_chain <- 2
n_iter <- 10
n_thin <- 1
n_burnin <- 1
var_id <- enquo(var_id)
var_tmp <- enquo(var_tmp)
var_tax <- enquo(var_tax)
var_pres <- enquo(var_cnt)
var_cnt <- enquo(var_cnt)
var_wei <- enquo(var_wei)
var_env <- enquo(var_env)
var_reg <- enquo(var_reg)
var_guild <- enquo(var_guild)
var_surf <- enquo(var_surf)
var_pas <- enquo(var_pas)
var_pro <- enquo(var_pro)
var_det <- enquo(var_det)
var_id <- enquo(var_id)
var_tmp <- enquo(var_tmp)
var_tax <- enquo(var_tax)
var_pres <- enquo(var_cnt)
var_reg <- enquo(var_reg)
var_guild <- enquo(var_guild)
#-----------------------------------------------------------------------------
# Write model and model data
datamodel <- do.call(int_datamodel, list(df, occup=TRUE, grow=FALSE, modenv=NULL, modenvG=NULL, timestep, period, var_id, var_tmp, var_tax, var_pres, var_reg, var_guild, var_cnt=NULL, var_wei=NULL, var_surf=NULL, var_envO=NULL, var_envP=NULL, var_envC=NULL, var_grow=NULL))
source("Fonction_package_modelisation.R")
#-----------------------------------------------------------------------------
# Write model and model data
datamodel <- do.call(int_datamodel, list(df, occup=TRUE, grow=FALSE, modenv=NULL, modenvG=NULL, timestep, period, var_id, var_tmp, var_tax, var_pres, var_reg, var_guild, var_cnt=NULL, var_wei=NULL, var_surf=NULL, var_envO=NULL, var_envP=NULL, var_envC=NULL, var_grow=NULL))
code <- do.call(int_popoccup, list(occup=TRUE,modenv=NULL,var_envO=NULL,var_envP=NULL,var_envC=NULL,var_guild))
popdyn_code <- as.call(c(as.symbol("{"), code))
save_parameters <- datamodel$popdyn_parameters
#-----------------------------------------------------------------------------
# Fit model
set.seed(123)
popdyn <- nimbleModel(code = popdyn_code,
constants = datamodel$popdyn_const,
data = datamodel$popdyn_data,
inits = datamodel$popdyn_inits,
name = "popdyn", calculate = FALSE)
popdynConf <- configureMCMC(popdyn, monitors = save_parameters)
popdynMCMC <- buildMCMC(popdynConf)
popdynComp <- compileNimble(popdyn)
popdynModel <- compileNimble(popdynMCMC, project = popdyn, resetFunctions = TRUE)
mcmc_chain <- runMCMC(popdynModel, nchains = n_chain, niter = n_iter, thin = n_thin, nburnin = n_burnin, setSeed = 123, samplesAsCodaMCMC = TRUE)
if (n_chain == 1 & !is.null(dim(mcmc_chain))) {
mcmc_na <- which(is.na(mcmc_chain[1,]))
if (length(mcmc_na) > 0) { mcmc_chain <- mcmc_chain[,-mcmc_na] }
}
if (n_chain > 1 & !is.null(dim(mcmc_chain[[1]]))) { for (i in 1:n_chain) {
mcmc_chain[[i]] <- mcmc_chain[[i]][,!colnames(mcmc_chain[[i]]) %in% names(which(is.na(mcmc_chain[[i]][1,])))]
}}
#-----------------------------------------------------------------------------
# set summary data frame of taxa and guilds and list of subscripts
mcmc_summary <- MCMCsummary(mcmc_chain, probs = c(0.025, 0.25, 0.5, 0.75, 0.975), Rhat = TRUE, n.eff = TRUE)
colnames(mcmc_summary) <- c("mean", "sd", "Q2.5", "Q25", "Q50", "Q75", "Q97.5", "Rhat", "n.eff")
id <- datamodel$popdyn_int$id
time <- datamodel$popdyn_int$time
tax <- datamodel$popdyn_int$taxa
region <- datamodel$popdyn_int$region
guild <- datamodel$popdyn_int$guild
varenv <- datamodel$popdyn_int$varenv
varcol <- datamodel$popdyn_int$varcol
vargrow <- datamodel$popdyn_int$vargrow
vardet <- datamodel$popdyn_int$vardet
start <- datamodel$popdyn_int$start
end <- datamodel$popdyn_int$end
protocol <- datamodel$popdyn_int$protocol
#-----------------------------------------------------------------------------
# get parameter names and position from row names
mcmc_summary$para <- row.names(mcmc_summary)
mcmc_summary$start <- str_locate(mcmc_summary$para, "\\[")[,1]
mcmc_summary$end <- str_locate(mcmc_summary$para, "\\]")[,1]
mcmc_summary$parameter <- substr(mcmc_summary$para, 1, mcmc_summary$start - 1)
mcmc_summary$pos <- substr(mcmc_summary$para, mcmc_summary$start + 1, mcmc_summary$end - 1)
position <- str_split_fixed(mcmc_summary$pos,",",Inf)
mcmc_summary <- mcmc_summary %>%
cbind(setNames(data.frame(position),paste("p",1:ncol(position),sep="")) %>%
rowwise() %>% mutate(p2 = ifelse("p2" %in% names(.), p2, 0)) %>%
rowwise() %>% mutate(p3 = ifelse("p3" %in% names(.), p3, 0))) %>%
mutate(across(c("p1","p2","p3"), ~as.numeric(.x))) %>%
relocate(parameter, .before = mean)
mcmc_summary$paratax <- ifelse(mcmc_summary$parameter %in% c("z","p.per","p.col","p.ext","p.per_id","p.col_id","p.ext_id","alpha","beta","alpha_per","beta_per","alpha_col","beta_col","z_lambda","z_mulambda","turnover","OR","N","N_lambda_id","N_mulambda_id","N_lambda","N_mulambda","N_PGR","B","B_lambda_id","B_mulambda_id","B_lambda","B_mulambda","B_PGR","alpha_N","beta_N","alpha_B","beta_B","p.det","alpha_det","beta_det"), tax[mcmc_summary$p1], NA)
mcmc_summary$paraid <- ifelse(mcmc_summary$parameter %in% c("z","p.per_id","p.ext_id","p.col_id","N","N_lambda_id","N_mulambda_id","B_lambda_id","B_mulambda_id"), id[mcmc_summary$p2], NA)
mcmc_summary$paratime <- ifelse(mcmc_summary$parameter %in% c("z","z_lambda","turnover","z_lambda_gui","N","N_lambda_id","N_lambda","B","B_lambda_id","B_lambda","N_lambda_gui","B_lambda_gui"), time[mcmc_summary$p3], NA)
mcmc_summary$region <- ifelse(mcmc_summary$parameter %in% c("z_mulambda","z_lambda","turnover","OR","z_lambda_gui","z_mulambda_gui","GOR","N_lambda_gui","B_lambda_gui","N_mulambda_gui","B_mulambda_gui"), region[mcmc_summary$p2], NA)
sub_reg <- select(mcmc_summary, region, p2)
sub_reg
sub_reg <- select(mcmc_summary, region, p2) %>% na.omit() %>% distinct() %>% arrange(p2)
sub_reg
sub_reg <- select(mcmc_summary, region, p2) %>% na.omit() %>% distinct() %>% arrange(p2) %>% set_colnames(c("","subscript"))
sub_reg
sub_reg <- select(mcmc_summary, region, p2) %>% na.omit() %>% distinct() %>% arrange(p2) %>% set_names(c("","subscript"))
sub_reg
sub_reg <- select(mcmc_summary, region, p2) %>% na.omit() %>% distinct() %>% arrange(p2) %>% set_names(c("","subscript")) %>% set_rownames(NULL)
sub_reg
#-----------------------------------------------------------------------------
# get region names and subscripts
sub_reg <- NULL
if (!is.null(region)) {
mcmc_summary$region <- ifelse(mcmc_summary$parameter %in% c("z_mulambda","z_lambda","turnover","OR","z_lambda_gui","z_mulambda_gui","GOR","N_lambda_gui","B_lambda_gui","N_mulambda_gui","B_mulambda_gui"), region[mcmc_summary$p2], NA)
sub_reg <- select(mcmc_summary, region, p2) %>% na.omit() %>% distinct() %>% arrange(p2) %>% set_names(c("","subscript"))
}
sub_reg
#-----------------------------------------------------------------------------
# get guilds names and subscripts
sub_gui <- NULL
if (!is.null(guild)) {
mcmc_summary$guild <- ifelse(mcmc_summary$parameter %in% c("z_lambda_gui","z_mulambda_gui","GOR","N_lambda_gui","N_mulambda_gui","B_lambda_gui","B_mulambda_gui"), guild[mcmc_summary$p1], NA)
sub_gui <- select(mcmc_summary, guild, p1) %>% na.omit() %>% distinct() %>% arrange(p1) %>% set_colnames(c("","subscript")) %>% set_rownames(NULL)
}
sub_gui
#-----------------------------------------------------------------------------
# get period from position and period subscripts
sub_period <- NULL
if (!is.null(period)) {
mcmc_summary$period <- ifelse(mcmc_summary$parameter %in% c("z_mulambda","OR","z_mulambda_gui","GOR","N_mulambda_id","N_mulambda","N_PGR","N_mulambda_gui","B_mulambda_id","B_mulambda","B_PGR","B_mulambda_gui"), paste(time[start[mcmc_summary$p3] - 1],time[end[mcmc_summary$p3]],sep="-"), NA)
sub_period <- select(mcmc_summary, period, p3) %>% na.omit() %>% distinct() %>% arrange(p3) %>% set_rownames(.$p3) %>% set_colnames(c("","subscript")) %>% set_rownames(NULL)
}
sub_period
#-----------------------------------------------------------------------------
# get names and subscripts of environmental covariates
sub_var <- NULL
if (!is.null(varenv)) {
mcmc_summary$covariate <- ifelse(mcmc_summary$parameter %in% c("beta","beta_per","beta_col"), varenv[mcmc_summary$p2], NA)
sub_var <- select(mcmc_summary, covariate, p2) %>% na.omit() %>% distinct() %>% arrange(p2) %>% set_colnames(c("","subscript")) %>% set_rownames(NULL)
}
sub_var
sub_tax <- select(mcmc_summary, paratax, p1) %>% na.omit() %>% distinct() %>% arrange(p1) %>% set_colnames(c("","subscript")) %>% set_rownames(NULL)
sub_tax
sub_tax <- select(mcmc_summary, paratax, p1) %>% na.omit() %>% distinct() %>% arrange(p1) %>% set_names(c("","subscript"))
sub_tax
library(usethis)
library(devtools)
library(roxygen2)
library(desc)
chemin <- "C:/Users/DORTEL/Desktop/PACKAGE/popdynmodel"
setwd(chemin)
devtools::document()
devtools::check(document=FALSE)
devtools::document()
devtools::check(document=FALSE)
devtools::document()
devtools::check(document=FALSE)
#---------------------------------------------------------------------------------------------------------------------
## Verification du package
devtools::check(document=FALSE)
#---------------------------------------------------------------------------------------------------------------------
## Installation du package
devtools::install()
#---------------------------------------------------------------------------------------------------------------------
## Readme
usethis::use_readme_md()
#---------------------------------------------------------------------------------------------------------------------
## Vignette
usethis::use_vignette("popdynmodel")
#---------------------------------------------------------------------------------------------------------------------
## Générer le fichier compressé
devtools::build()
